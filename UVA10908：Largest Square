#include <bits/stdc++.h>
using namespace std;

int main()
{
	int T, M, N, Q, r, c;
	char map[101][101];	//07:宣告二維陣列來儲存輸入。
	
	cin >> T;	//09:讀進測資組數T。
	while(T--)	//10:對每一組測資用主迴圈處理。
	{
		cin >> M >> N >> Q;
		for(int i=0; i<M; i++)	//13-14:讀進字元矩陣的資料。
			cin >> map[i];
			
		cout << M << " " << N << " " << Q << endl;	//16:先印出每組測資的第一行。
		
		while(Q--)	//18:對每一組輸入的(r, c)求解。
		{
			int ans, a, b;
			
			cin >> r >> c;
			ans=1;	//23:一開始預設最大邊長為1。
			for(int i=1; i<=M || i<=N; i++)	//24:在不超出字元矩陣的範圍內求解。
			{
				int flag=0;	//26:flag=0代表要繼續往外擴張，已找到更大的正方形邊長。
				
				for(a=r-i; a<=r+i; a++)	//28-30:依次以(r, c)為中心，往上下左右方向各增加1來比對。
				{
					for(b=c-i; b<=c+i; b++)
					{
						if(a<0 || b<0 || a>=M || b>=N)	//32-36:若已超出矩陣邊界，將flag設為1，代表停止尋找。
						{
							flag=1;
							break;
						}
						if(map[a][b]!=map[r][c])	//37-41:若比對到與(r, c)的字元不同，將flag設為1，
						{							//代表停止尋找。
							flag=1;
							break;
						}
					}
				}
				if(!flag)	//44-47:若flag為0，表示該次往外增加的1的比對成功，因此將最大邊長增加2(左右、上下
					ans+=2;	//方向都各增加1);否則就跳出不要繼續找了。
				else
					break;
			}
			cout << ans << endl;	//49:印出答案。
		}
	}
	return 0;
}
